1、提取最右侧的1
n & (-n)

2、判断一个数是不是2的幂
n > 0 && n == (n & (-n))

3、判断一个数是不是3的幂
n > 0 && (3^19) % n == 0

4、返回大于等于n的最小的2某次方

 public static int near2Power(int value) {
        if (value <= 0)
            return 1;
        value--;
        value |= (value >>> 1);
        value |= (value >>> 2);
        value |= (value >>> 4);
        value |= (value >>> 8);
        value |= (value >>> 16);
        return value+1;

 }

5、区间[left, right]内所有数字&的结果
  [13,15] 之内的所有数字的&结果
  left == right 所有数字&的结果就是自己本身
  left < right

  while(left < right) {
    right -= (right & (-right));
  }
  return right;

6、反转一个二进制的状态
16 —> 8 -> 4 -> 2 -> 1

16: 0xffff0000  >>> 16     0x0000ffff << 16
8:  0xff00ff00  >>> 8      0x00ff00ff << 8
4:  0xf0f0f0f0  >>> 4      0x0f0f0f0f << 4
2:  0xcccccccc  >>> 2      0x33333333 << 2
1:  0xaaaaaaaa  >>> 1      0x55555555 << 1

7、返回一个数二进制中有几个1。超自然版
每次取出最右侧的1????

while (n != 0) {
    n = (n & -n);
    count++;
}

8、位图   BitSet/BitMap

9、位运算实现加减乘除
相加： a^b : a和b两个数无进位的相加结果； (a&b)<<1: a和b进位的结果
a^b 和 (a&b)<<1 这两个数在进行取无进位的相加结果， 进位结果


add(a, b)  相加
add(a,-b), -b是(~b+1)   所以减法是add(a, add(~b,1));

乘法：
multi(a,b)
     001011      11
  *  000110       6
-----------------------
    0010110
+  00101100
-----------------------
   01000010       66



while(b != 0) {
    if ((b & 1) != 0)
        ans = add(ans, a);
    b >>>= 1;
    a <<= 1;
}


除法：
280 / 25

280: 0100011000
25： 0000011001

x/y
 (y << 30)  移动后符号位置可能是1
 x >= (y << 30)     ------>      (x >>> 30) >= y

 (a < 0 ^ b < 0)  -->  a和b同时小于0或者同时大于0是false; 否则有一个小于0一个大于0是true




数据结构设计高频题  nowCoder 牛客
1、setAll功能的哈希表
setAll(int value)：将哈希表中所有元素改为value 要求时间复杂度是O(1)
通过添加时间戳，这个时间之前的所有数值全部改成value  setAllValue  setAllTime

2、实现LRU结构
最近最久未使用的
哈希表+双向链表 实现
双向链表：尾部插入
双向链表的头： 最早进入
双向链表的尾： 最晚进入链表

addNode(Node node) 将node插入链表尾部
moveNodeToTail(Node node)将node移动到链表尾部
removeHead() 移除头节点， LRU的缓存不够使用了，将最早进入的节点移除

3、插入、删除和获取随机元素O(1)时间的复杂度， 不允许有重复数字

哈希表 + 数组   实现

insert()
remove()
getRandom() 在数组中随机取出一个数


4、插入、删除和获取随机元素O(1)时间复杂度，允许有重复数字

哈希表 + 数组    实现

insert()
remove()  将哈希表和数组中的元素都要删除
getRandom()


5、快速获得数据流的中位数结构
6、最大频率栈
7、全O(1)的数据结构




  
