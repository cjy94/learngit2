1、怪兽问题
给定一组怪兽的武力值数组w[]，和钱数组money[]，如果想要通过所有的怪兽，需要花费的最少的钱是多少？
两种解法：
1.1 数据信息中， 武力值较小，花费的钱较大时的一种尝试模型
 public long process(int[] w, int[] money, int force, int index) 表示当前到达index号怪兽，拥有的武力值是force, 想要通过后续所有的怪兽，需要花费的最少的钱是多少？

 一个2维dp表， dp[index][force]: 行是怪兽编号， 列是武力值信息

 dp[i][j]: 表示已经顺利通过[0..i-1]个怪兽，当前在i号怪兽，拥有的武力值是j,


1.2 数据信息中， 每个怪兽的武力值较大，但是花费的钱较小时的一种尝试模型
dp[i][j]: 表示当前在i号怪兽， 顺利通过[0...i]号怪兽，并且花费的钱数必须在money[j]的情况下，获得的最大能力是多少，如果不能顺利通过dp[i][j]=-1

一个2维dp表， dp[i][j]: 行表示怪兽编号，列表示通过[0...i]号怪兽，必须花费money[j]钱


2、给定一个字符串str， 只能在str后面添加字符串， 生成一个更长的字符串， 更长的字符串需要包含两个str， 且两个str开始的位置不能一样，求最少添加多少个字符
比如：
    str="123123", 后面最少添加"123", 变成"123123123"
    其中包含两个str， 且两个str开始的位置不一样

算法原型： kmp
计算前缀和数组的时候，将最后一个字符的next信息也记录下， 包是整个字符串的最长前缀和最长后缀的长度

3、给定两个二叉树T1和T2， 怎么知道是否T1的某棵子树和T2次昂等，并返回结果
3.1 以T1每一个节点为头遍历检查是否和T2一样

算法原型: kmp
3.2  将T1和T2先序遍历序列化后，使用KMP算法实现字符串的匹配
  T1           T2
   1            1
  / \          /
 1   1        10
    /
   10

T1先序结果： 1 1 # # 1 10 # # #
T2先序结果： 1 10 # # #
利用kmp进行字符串匹配， 如果T2是T1的子串， T2一定是T1的子树

4、给定一个字符串， 如果只能在后面添加字符， 最少添加几个能让字符串整体都是回文
例如： "abc12321"  最少添加的字符： "cba"
算法原型： manacher
在计算每一个字符的最长回文半径时， 当某一个字符的最后回文半径到达了数组的length位置，那么他之前构不成回文的子串添加到字符串的后面，就整体构成了回文字符串

每个位置都是回文中心的情况下，最大能够扩多长

5、 已知某个字符串只含有小写字母， 压缩之后的字符串str包含数字、大括号和小写字符，请根据str还原出原始字符串并返回
比如：
3{2{abc}} -> abcabc abcabc abcabc
3{a}2{bc} -> aaa bc bc
3{a2{c}}  -> acc acc acc

利用递归结构

注： 和字符串表达式计算最终结果一样

6、一个矩阵可以由左上角点的坐标和右下角点的坐标带代表， 给定一些矩阵， 请返回这些矩阵全拼在一起，能否拼出完美的矩阵？

 一组小矩阵能否拼出一个大矩阵的条件是：1） 小矩阵的面积和 = 大矩阵的面积； 2）除了4个顶点外，其他所有矩阵的角顶点都出现偶数次

7、 先给出可整合数组的定义： 如果一个数组在排序之后，每相邻的两个数差值的绝对值都为1， 则该数组为可整合数组。
例如：[5,5,3,2,6,4,3] 可整合数组是[5,3,2,6,4], 符合每两个数差的绝对值都为1，
所以这个数组为可整合数组，给定一个整形数组arr，请返回其中最大的可整合数组

根据题意的可整合数组， 从两个方面定义可整合数组：1）该数组中的最大值-最小值=数组元素个数-1； 2）数组中不会出现重复值

从数组中每一个元素arr[i]开始往后一次检查i+1, i+2...等元素，是否满足可整合数组的2个条件，

[5,5,3,2,6,4,3]
思想： index=0，依次以arr[index]作为可整合数组开头元素，依次枚举index+1后面的每个元素作为结尾情况下，能否满足可整合数组
1） 以arr[index]开头，并且添加到set集合中
2） 枚举arr[index++]的元素，set集合中如果不包含该元素，则加入到集合中，并且更新最大值和最小值；一旦出现了重复元素，那么退出以arr[index]为起始的可整合数组的检查
3） 根据set中的大小和max-min的关系，更新res
4） 重复2）

8、给定k个有序链表头节点，怎么把他们merge成一个有序的链表
算法原型： 小根堆


















